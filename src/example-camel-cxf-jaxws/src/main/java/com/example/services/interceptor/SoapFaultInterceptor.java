package com.example.services.interceptor;

import java.util.logging.Logger;

import javax.xml.soap.SOAPMessage;

import org.apache.cxf.binding.soap.SoapMessage;
import org.apache.cxf.binding.soap.interceptor.AbstractSoapInterceptor;
import org.apache.cxf.binding.soap.saaj.SAAJOutInterceptor;
import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.phase.Phase;

/**
 * CXF Soap Interceptor for Outbound Soap Messages. This interceptor uses the Hash generated by the {@link OdsSoapInterceptorInbound} of the inbound
 * soap message and send it with the Outbound Messages to be publish to JMS destinations.
 *
 */
public class SoapFaultInterceptor extends AbstractSoapInterceptor {

    /**
     * The Logger instance.
     */
    private final Logger logger = Logger.getLogger(this.getClass().getSimpleName());

    /**
     * default constructor.
     */
    protected SoapFaultInterceptor() {
        super(Phase.PRE_PROTOCOL);
        addAfter(SAAJOutInterceptor.class.getName());

    }

    /**
     * {@inheritDoc}
     *
     * @see AbstractSoapInterceptor#handleFault(SoapMessage)
     */
    @Override
    public void handleFault(final SoapMessage message) {
        logger.info("inside handleFault ..");
//        for (final Class<?> format : message.getContentFormats()) {
//            logger.info("Content Format: " + format.getName());
//        }

        final SOAPMessage soapMessage = message.getContent(SOAPMessage.class);
        if (soapMessage == null) {
            logger.info("SOAPMessage not exists");
            return;
        }

//          String EXCEPTION_NAMESPACE = "http://www.airservicesaustralia.com/ODS/Exception/v1";
//          String NAMESPACE_PREFIX = "ex";

//          String ERR_CAUSATION_DATA_NODE = "causationData";
//          String ERR_CODE_NODE = "code";
//          String ERR_MSG_NODE = "message";

//          final SOAPBody soapBody = soapMessage.getSOAPBody();
//
//          final Element detail = soapBody.getOwnerDocument().createElement("detail");
//          final Element fatalErrorListElement = soapBody.getOwnerDocument().createElementNS(EXCEPTION_NAMESPACE, "FatalErrorList");
//          fatalErrorListElement.setPrefix(NAMESPACE_PREFIX);
//          detail.appendChild(fatalErrorListElement);
//
//          final FatalErrorListType fatalErrorList = createFatalErrorList(message.getContent(Exception.class));
//          FatalErrorType error = fatalErrorList.getFatalError();
//          final String errorName = error.getClass().getSimpleName();

//          Document doc = fatalErrorListElement.getOwnerDocument();

//          final Element errorElement = doc.createElementNS(EXCEPTION_NAMESPACE, errorName);
//          errorElement.setPrefix(NAMESPACE_PREFIX);
//
//          final Element codeElement = doc.createElementNS(EXCEPTION_NAMESPACE, ERR_CODE_NODE);
//          codeElement.setPrefix(NAMESPACE_PREFIX);
//          codeElement.appendChild(doc.createTextNode(error.getCode()));
//          errorElement.appendChild(codeElement);
//          final Element messageElement = doc.createElementNS(EXCEPTION_NAMESPACE, ERR_MSG_NODE);
//          messageElement.setPrefix(NAMESPACE_PREFIX);
//          messageElement.appendChild(doc.createTextNode(error.getMessage()));
//          errorElement.appendChild(messageElement);
//          final Element causDataElement = doc.createElementNS(EXCEPTION_NAMESPACE, ERR_CAUSATION_DATA_NODE);
//          causDataElement.setPrefix(NAMESPACE_PREFIX);
//          causDataElement.appendChild(doc.createTextNode(error.getCausationData()));
//          errorElement.appendChild(causDataElement);
//
//          fatalErrorListElement.appendChild(errorElement);

    }

    /**
     * {@inheritDoc}
     *
     * @see AbstractSoapInterceptor#handleMessage(SoapMessage)
     */
    @Override
    public void handleMessage(final SoapMessage message) throws Fault {
        logger.info("inside handleMessage - ignoring..");

    }

}
